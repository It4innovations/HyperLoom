syntax = "proto2";

package loom.pb.comm;

option optimize_for = LITE_RUNTIME;

// Plan

message Task {
	required int32 task_type = 1;
	required bytes config = 2;
	repeated int32 input_ids = 3;
	optional int32 resource_request_index = 5 [default = -1];
	optional bool result = 6;
  optional string checkpoint_path = 7;

	optional string label = 12;
        optional bytes metadata = 13;
}

message Resource {
	required int32 resource_type = 1;
	required int32 value = 2;
}

message ResourceRequest {
	repeated Resource resources = 1;
}

message Plan {
	repeated ResourceRequest resource_requests = 1;
	repeated Task tasks = 2;
	optional int32 id_base = 4;
}

// Server messages

message Register {
	enum Type {
		REGISTER_WORKER = 1;
		REGISTER_CLIENT = 2;
	}
	required int32 protocol_version = 1;
	required Type type = 2;

	// Worker
	optional int32 port = 3;
	repeated string task_types = 4;
	repeated string data_types = 5;
	optional int32 cpus = 6;
}

message ServerMessage {
	enum Type {
		START_JOB = 1;
	}
}

message WorkerCommand {
	enum Type {
		TASK = 1;
		SEND = 2;
		REMOVE = 3;
		DICTIONARY = 8;
		UPDATE = 9;
    LOAD_CHECKPOINT = 10;
	}
	required Type type = 1;

	// ALL
	optional int32 id = 2;

	// TASK
	optional int32 task_type = 3;
	optional string task_config = 4;
	repeated int32 task_inputs = 5;
	optional int32 n_cpus = 6;

  // TASK + LOAD_CHECKPOINT
	optional string checkpoint_path = 7;

	// SEND
	optional string address = 10;

	// DICTIONARY
	repeated string symbols = 100;

  // UPDATE
  optional string trace_path = 120;
  optional int32 worker_id = 121;
}

message WorkerResponse {
	enum Type {
		FINISHED = 1;
		FINISHED_AND_CHECKPOINTING = 2;
		TRANSFERED = 3;
		FAILED = 4;
		CHECKPOINT_WRITTEN = 5;
		CHECKPOINT_WRITE_FAILED = 6;
		CHECKPOINT_LOADED = 7;
		CHECKPOINT_LOAD_FAILED = 8;
	}
	required Type type = 1;
	required int32 id = 2;

	// FINISHED + CHECKPOINT_LOADED
	optional uint64 size = 3;
	optional uint64 length = 4;

	// FAILED + CHECKPOINT_FAILED
	optional string error_msg = 100;
}

message Announce {
	required int32 port = 1;
}

message DataHeader {
	required int32 id = 1;
	required int32 type_id = 3;
	required int64 n_messages = 2;
}

message Error {
	optional int32 id = 1;
	optional string worker = 2;
	optional string error_msg = 3;
}

message Stats {
	optional int32 n_workers = 1;
        optional int32 n_data_objects = 2;
}

message ClientResponse {
	enum Type {
		DATA = 1;
		TASK_FINISHED = 2;
		TASK_FAILED = 3;
		ERROR = 4;
		DICTIONARY = 10;
		STATS = 11;
	}
	required Type type = 1;
	optional DataHeader data = 2;
	optional Error error = 4; // TASK_FAILED + ERROR
	repeated string symbols = 5;
	optional Stats stats = 6;
	optional int32 id = 7; // TASK_FINISHED
}

message ClientRequest {
  enum Type {
    PLAN = 1;
    FETCH = 2;
    RELEASE = 3;
    STATS = 6;
    TRACE = 7;
    TERMINATE = 10;
  }

  required Type type = 1;

  // PLAN
  optional Plan plan = 2;

  // FETCH + RELEASE
  optional int32 id = 3;

  // TRACE
  optional string trace_path = 7;
}
