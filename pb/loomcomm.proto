package loomcomm;

option optimize_for = LITE_RUNTIME;
import "loomplan.proto";

message Register {
	enum Type {
		REGISTER_WORKER = 1;
		REGISTER_CLIENT = 2;
	}
	required int32 protocol_version = 1;
	required Type type = 2;

	// Worker
	optional int32 port = 3;
	repeated string task_types = 4;
	repeated string data_types = 5;
	optional int32 cpus = 6;
}

message ServerMessage {
	enum Type {
		START_JOB = 1;
	}
}

message WorkerCommand {
	enum Type {
		TASK = 1;
		SEND = 2;
		REMOVE = 3;
		DICTIONARY = 8;
		UPDATE = 9;
	}
	required Type type = 1;

	// ALL
	optional int32 id = 2;

	// TASK
	optional int32 task_type = 3;
	optional string task_config = 4;
	repeated int32 task_inputs = 5;
	optional int32 n_cpus = 6;

	// SEND
	optional string address = 10;

	// DICTIONARY
	repeated string symbols = 100;

  // UPDATE
  optional string trace_path = 120;
  optional int32 worker_id = 121;
}

message WorkerResponse {
	enum Type {
		FINISHED = 1;
		TRANSFERED = 2;
		FAILED = 3;
	}
	required Type type = 1;
	required int32 id = 2;

	// FINISHED
	optional uint64 size = 3;
	optional uint64 length = 4;

	// FAILED
	optional string error_msg = 100;
}

message Announce {
	required int32 port = 1;
}

message DataHeader {
	required int32 id = 1;
  required int32 type_id = 3;
	required int64 n_messages = 2;
}

message Error {
	required int32 id = 1;
	required string worker = 2;
	required string error_msg = 3;
}

message Stats {
	optional int32 n_workers = 1;
        optional int32 n_data_objects = 2;
}

message ClientResponse {
	enum Type {
		DATA = 1;
		// EVENT = 2;
		ERROR = 3;
		DICTIONARY = 4;
		STATS = 5;
	}
	required Type type = 1;
	optional DataHeader data = 2;
	optional Error error = 4;
	repeated string symbols = 5;
  optional Stats stats = 6;
}

message ClientRequest {
  enum Type {
	  PLAN = 1;
	  STATS = 2;
    TRACE = 3;
    TERMINATE = 10;
  }

  required Type type = 1;

  // PLAN
	optional loomplan.Plan plan = 2;

  // REPORT
  optional string trace_path = 6;
}
