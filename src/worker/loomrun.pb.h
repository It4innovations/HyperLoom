// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loomrun.proto

#ifndef PROTOBUF_loomrun_2eproto__INCLUDED
#define PROTOBUF_loomrun_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace loomrun {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loomrun_2eproto();
void protobuf_AssignDesc_loomrun_2eproto();
void protobuf_ShutdownFile_loomrun_2eproto();

class Run;

// ===================================================================

class Run : public ::google::protobuf::MessageLite {
 public:
  Run();
  virtual ~Run();

  Run(const Run& from);

  inline Run& operator=(const Run& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Run& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Run* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Run* other);

  // implements Message ----------------------------------------------

  Run* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Run& from);
  void MergeFrom(const Run& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string args = 1;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 1;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated string map_inputs = 2;
  inline int map_inputs_size() const;
  inline void clear_map_inputs();
  static const int kMapInputsFieldNumber = 2;
  inline const ::std::string& map_inputs(int index) const;
  inline ::std::string* mutable_map_inputs(int index);
  inline void set_map_inputs(int index, const ::std::string& value);
  inline void set_map_inputs(int index, const char* value);
  inline void set_map_inputs(int index, const char* value, size_t size);
  inline ::std::string* add_map_inputs();
  inline void add_map_inputs(const ::std::string& value);
  inline void add_map_inputs(const char* value);
  inline void add_map_inputs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& map_inputs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_map_inputs();

  // repeated string map_outputs = 3;
  inline int map_outputs_size() const;
  inline void clear_map_outputs();
  static const int kMapOutputsFieldNumber = 3;
  inline const ::std::string& map_outputs(int index) const;
  inline ::std::string* mutable_map_outputs(int index);
  inline void set_map_outputs(int index, const ::std::string& value);
  inline void set_map_outputs(int index, const char* value);
  inline void set_map_outputs(int index, const char* value, size_t size);
  inline ::std::string* add_map_outputs();
  inline void add_map_outputs(const ::std::string& value);
  inline void add_map_outputs(const char* value);
  inline void add_map_outputs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& map_outputs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_map_outputs();

  // @@protoc_insertion_point(class_scope:loomrun.Run)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> map_inputs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> map_outputs_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomrun_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomrun_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomrun_2eproto();
  friend void protobuf_ShutdownFile_loomrun_2eproto();

  void InitAsDefaultInstance();
  static Run* default_instance_;
};
// ===================================================================


// ===================================================================

// Run

// repeated string args = 1;
inline int Run::args_size() const {
  return args_.size();
}
inline void Run::clear_args() {
  args_.Clear();
}
inline const ::std::string& Run::args(int index) const {
  // @@protoc_insertion_point(field_get:loomrun.Run.args)
  return args_.Get(index);
}
inline ::std::string* Run::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:loomrun.Run.args)
  return args_.Mutable(index);
}
inline void Run::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:loomrun.Run.args)
  args_.Mutable(index)->assign(value);
}
inline void Run::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:loomrun.Run.args)
}
inline void Run::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomrun.Run.args)
}
inline ::std::string* Run::add_args() {
  return args_.Add();
}
inline void Run::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:loomrun.Run.args)
}
inline void Run::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:loomrun.Run.args)
}
inline void Run::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:loomrun.Run.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Run::args() const {
  // @@protoc_insertion_point(field_list:loomrun.Run.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Run::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:loomrun.Run.args)
  return &args_;
}

// repeated string map_inputs = 2;
inline int Run::map_inputs_size() const {
  return map_inputs_.size();
}
inline void Run::clear_map_inputs() {
  map_inputs_.Clear();
}
inline const ::std::string& Run::map_inputs(int index) const {
  // @@protoc_insertion_point(field_get:loomrun.Run.map_inputs)
  return map_inputs_.Get(index);
}
inline ::std::string* Run::mutable_map_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:loomrun.Run.map_inputs)
  return map_inputs_.Mutable(index);
}
inline void Run::set_map_inputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:loomrun.Run.map_inputs)
  map_inputs_.Mutable(index)->assign(value);
}
inline void Run::set_map_inputs(int index, const char* value) {
  map_inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:loomrun.Run.map_inputs)
}
inline void Run::set_map_inputs(int index, const char* value, size_t size) {
  map_inputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomrun.Run.map_inputs)
}
inline ::std::string* Run::add_map_inputs() {
  return map_inputs_.Add();
}
inline void Run::add_map_inputs(const ::std::string& value) {
  map_inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:loomrun.Run.map_inputs)
}
inline void Run::add_map_inputs(const char* value) {
  map_inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:loomrun.Run.map_inputs)
}
inline void Run::add_map_inputs(const char* value, size_t size) {
  map_inputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:loomrun.Run.map_inputs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Run::map_inputs() const {
  // @@protoc_insertion_point(field_list:loomrun.Run.map_inputs)
  return map_inputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Run::mutable_map_inputs() {
  // @@protoc_insertion_point(field_mutable_list:loomrun.Run.map_inputs)
  return &map_inputs_;
}

// repeated string map_outputs = 3;
inline int Run::map_outputs_size() const {
  return map_outputs_.size();
}
inline void Run::clear_map_outputs() {
  map_outputs_.Clear();
}
inline const ::std::string& Run::map_outputs(int index) const {
  // @@protoc_insertion_point(field_get:loomrun.Run.map_outputs)
  return map_outputs_.Get(index);
}
inline ::std::string* Run::mutable_map_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:loomrun.Run.map_outputs)
  return map_outputs_.Mutable(index);
}
inline void Run::set_map_outputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:loomrun.Run.map_outputs)
  map_outputs_.Mutable(index)->assign(value);
}
inline void Run::set_map_outputs(int index, const char* value) {
  map_outputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:loomrun.Run.map_outputs)
}
inline void Run::set_map_outputs(int index, const char* value, size_t size) {
  map_outputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomrun.Run.map_outputs)
}
inline ::std::string* Run::add_map_outputs() {
  return map_outputs_.Add();
}
inline void Run::add_map_outputs(const ::std::string& value) {
  map_outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:loomrun.Run.map_outputs)
}
inline void Run::add_map_outputs(const char* value) {
  map_outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:loomrun.Run.map_outputs)
}
inline void Run::add_map_outputs(const char* value, size_t size) {
  map_outputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:loomrun.Run.map_outputs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Run::map_outputs() const {
  // @@protoc_insertion_point(field_list:loomrun.Run.map_outputs)
  return map_outputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Run::mutable_map_outputs() {
  // @@protoc_insertion_point(field_mutable_list:loomrun.Run.map_outputs)
  return &map_outputs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loomrun

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loomrun_2eproto__INCLUDED
