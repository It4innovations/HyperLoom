// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loomrun.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loomrun.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace loomrun {

void protobuf_ShutdownFile_loomrun_2eproto() {
  delete MapFile::default_instance_;
  delete Run::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_loomrun_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_loomrun_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MapFile::default_instance_ = new MapFile();
  Run::default_instance_ = new Run();
  MapFile::default_instance_->InitAsDefaultInstance();
  Run::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loomrun_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_loomrun_2eproto_once_);
void protobuf_AddDesc_loomrun_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_loomrun_2eproto_once_,
                 &protobuf_AddDesc_loomrun_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loomrun_2eproto {
  StaticDescriptorInitializer_loomrun_2eproto() {
    protobuf_AddDesc_loomrun_2eproto();
  }
} static_descriptor_initializer_loomrun_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MapFile::kFilenameFieldNumber;
const int MapFile::kInputIndexFieldNumber;
const int MapFile::kOutputIndexFieldNumber;
const int MapFile::kVariableFieldNumber;
#endif  // !_MSC_VER

MapFile::MapFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomrun.MapFile)
}

void MapFile::InitAsDefaultInstance() {
}

MapFile::MapFile(const MapFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomrun.MapFile)
}

void MapFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_index_ = 0;
  output_index_ = 0;
  variable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapFile::~MapFile() {
  // @@protoc_insertion_point(destructor:loomrun.MapFile)
  SharedDtor();
}

void MapFile::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete variable_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapFile& MapFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomrun_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomrun_2eproto();
#endif
  return *default_instance_;
}

MapFile* MapFile::default_instance_ = NULL;

MapFile* MapFile::New() const {
  return new MapFile;
}

void MapFile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapFile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(input_index_, output_index_);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_variable()) {
      if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        variable_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MapFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomrun.MapFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_input_index;
        break;
      }

      // required int32 input_index = 2;
      case 2: {
        if (tag == 16) {
         parse_input_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_index_)));
          set_has_input_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_output_index;
        break;
      }

      // required int32 output_index = 3;
      case 3: {
        if (tag == 24) {
         parse_output_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_index_)));
          set_has_output_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        break;
      }

      // optional string variable = 4;
      case 4: {
        if (tag == 34) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomrun.MapFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomrun.MapFile)
  return false;
#undef DO_
}

void MapFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomrun.MapFile)
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required int32 input_index = 2;
  if (has_input_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->input_index(), output);
  }

  // required int32 output_index = 3;
  if (has_output_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->output_index(), output);
  }

  // optional string variable = 4;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->variable(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomrun.MapFile)
}

int MapFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required int32 input_index = 2;
    if (has_input_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_index());
    }

    // required int32 output_index = 3;
    if (has_output_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output_index());
    }

    // optional string variable = 4;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variable());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapFile*>(&from));
}

void MapFile::MergeFrom(const MapFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_input_index()) {
      set_input_index(from.input_index());
    }
    if (from.has_output_index()) {
      set_output_index(from.output_index());
    }
    if (from.has_variable()) {
      set_variable(from.variable());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MapFile::CopyFrom(const MapFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MapFile::Swap(MapFile* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(input_index_, other->input_index_);
    std::swap(output_index_, other->output_index_);
    std::swap(variable_, other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapFile::GetTypeName() const {
  return "loomrun.MapFile";
}


// ===================================================================

#ifndef _MSC_VER
const int Run::kArgsFieldNumber;
const int Run::kMapsFieldNumber;
#endif  // !_MSC_VER

Run::Run()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomrun.Run)
}

void Run::InitAsDefaultInstance() {
}

Run::Run(const Run& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomrun.Run)
}

void Run::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Run::~Run() {
  // @@protoc_insertion_point(destructor:loomrun.Run)
  SharedDtor();
}

void Run::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Run::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Run& Run::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomrun_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomrun_2eproto();
#endif
  return *default_instance_;
}

Run* Run::default_instance_ = NULL;

Run* Run::New() const {
  return new Run;
}

void Run::Clear() {
  args_.Clear();
  maps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Run::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomrun.Run)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string args = 1;
      case 1: {
        if (tag == 10) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_args;
        if (input->ExpectTag(18)) goto parse_maps;
        break;
      }

      // repeated .loomrun.MapFile maps = 2;
      case 2: {
        if (tag == 18) {
         parse_maps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_maps;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomrun.Run)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomrun.Run)
  return false;
#undef DO_
}

void Run::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomrun.Run)
  // repeated string args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->args(i), output);
  }

  // repeated .loomrun.MapFile maps = 2;
  for (int i = 0; i < this->maps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->maps(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomrun.Run)
}

int Run::ByteSize() const {
  int total_size = 0;

  // repeated string args = 1;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // repeated .loomrun.MapFile maps = 2;
  total_size += 1 * this->maps_size();
  for (int i = 0; i < this->maps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maps(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Run::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Run*>(&from));
}

void Run::MergeFrom(const Run& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  maps_.MergeFrom(from.maps_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Run::CopyFrom(const Run& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Run::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->maps())) return false;
  return true;
}

void Run::Swap(Run* other) {
  if (other != this) {
    args_.Swap(&other->args_);
    maps_.Swap(&other->maps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Run::GetTypeName() const {
  return "loomrun.Run";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loomrun

// @@protoc_insertion_point(global_scope)
