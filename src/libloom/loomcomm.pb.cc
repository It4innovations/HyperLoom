// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loomcomm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loomcomm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace loomcomm {

void protobuf_ShutdownFile_loomcomm_2eproto() {
  delete Register::default_instance_;
  delete ServerMessage::default_instance_;
  delete WorkerCommand::default_instance_;
  delete WorkerResponse::default_instance_;
  delete Announce::default_instance_;
  delete DataHeader::default_instance_;
  delete Error::default_instance_;
  delete Stats::default_instance_;
  delete ClientResponse::default_instance_;
  delete ClientRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_loomcomm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_loomcomm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::loomplan::protobuf_AddDesc_loomplan_2eproto();
  Register::default_instance_ = new Register();
  ServerMessage::default_instance_ = new ServerMessage();
  WorkerCommand::default_instance_ = new WorkerCommand();
  WorkerResponse::default_instance_ = new WorkerResponse();
  Announce::default_instance_ = new Announce();
  DataHeader::default_instance_ = new DataHeader();
  Error::default_instance_ = new Error();
  Stats::default_instance_ = new Stats();
  ClientResponse::default_instance_ = new ClientResponse();
  ClientRequest::default_instance_ = new ClientRequest();
  Register::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  WorkerCommand::default_instance_->InitAsDefaultInstance();
  WorkerResponse::default_instance_->InitAsDefaultInstance();
  Announce::default_instance_->InitAsDefaultInstance();
  DataHeader::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  Stats::default_instance_->InitAsDefaultInstance();
  ClientResponse::default_instance_->InitAsDefaultInstance();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loomcomm_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_loomcomm_2eproto_once_);
void protobuf_AddDesc_loomcomm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_loomcomm_2eproto_once_,
                 &protobuf_AddDesc_loomcomm_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loomcomm_2eproto {
  StaticDescriptorInitializer_loomcomm_2eproto() {
    protobuf_AddDesc_loomcomm_2eproto();
  }
} static_descriptor_initializer_loomcomm_2eproto_;
#endif

// ===================================================================

bool Register_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Register_Type Register::REGISTER_WORKER;
const Register_Type Register::REGISTER_CLIENT;
const Register_Type Register::Type_MIN;
const Register_Type Register::Type_MAX;
const int Register::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Register::kProtocolVersionFieldNumber;
const int Register::kTypeFieldNumber;
const int Register::kPortFieldNumber;
const int Register::kTaskTypesFieldNumber;
const int Register::kDataTypesFieldNumber;
const int Register::kCpusFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.Register)
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.Register)
}

void Register::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_version_ = 0;
  type_ = 1;
  port_ = 0;
  cpus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:loomcomm.Register)
  SharedDtor();
}

void Register::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Register& Register::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Register*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(port_, cpus_);
    protocol_version_ = 0;
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  task_types_.Clear();
  data_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 protocol_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .loomcomm.Register.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::loomcomm::Register_Type_IsValid(value)) {
            set_type(static_cast< ::loomcomm::Register_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_task_types;
        break;
      }

      // repeated string task_types = 4;
      case 4: {
        if (tag == 34) {
         parse_task_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_task_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_task_types;
        if (input->ExpectTag(42)) goto parse_data_types;
        break;
      }

      // repeated string data_types = 5;
      case 5: {
        if (tag == 42) {
         parse_data_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data_types;
        if (input->ExpectTag(48)) goto parse_cpus;
        break;
      }

      // optional int32 cpus = 6;
      case 6: {
        if (tag == 48) {
         parse_cpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpus_)));
          set_has_cpus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.Register)
  return false;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.Register)
  // required int32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocol_version(), output);
  }

  // required .loomcomm.Register.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // repeated string task_types = 4;
  for (int i = 0; i < this->task_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->task_types(i), output);
  }

  // repeated string data_types = 5;
  for (int i = 0; i < this->data_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->data_types(i), output);
  }

  // optional int32 cpus = 6;
  if (has_cpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cpus(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.Register)
}

int Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol_version());
    }

    // required .loomcomm.Register.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 cpus = 6;
    if (has_cpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpus());
    }

  }
  // repeated string task_types = 4;
  total_size += 1 * this->task_types_size();
  for (int i = 0; i < this->task_types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->task_types(i));
  }

  // repeated string data_types = 5;
  total_size += 1 * this->data_types_size();
  for (int i = 0; i < this->data_types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data_types(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Register*>(&from));
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_types_.MergeFrom(from.task_types_);
  data_types_.MergeFrom(from.data_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_cpus()) {
      set_cpus(from.cpus());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(type_, other->type_);
    std::swap(port_, other->port_);
    task_types_.Swap(&other->task_types_);
    data_types_.Swap(&other->data_types_);
    std::swap(cpus_, other->cpus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Register::GetTypeName() const {
  return "loomcomm.Register";
}


// ===================================================================

bool ServerMessage_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerMessage_Type ServerMessage::START_JOB;
const ServerMessage_Type ServerMessage::Type_MIN;
const ServerMessage_Type ServerMessage::Type_MAX;
const int ServerMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerMessage::ServerMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.ServerMessage)
}

void ServerMessage::InitAsDefaultInstance() {
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.ServerMessage)
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:loomcomm.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerMessage& ServerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New() const {
  return new ServerMessage;
}

void ServerMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.ServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.ServerMessage)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.ServerMessage)
}

int ServerMessage::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerMessage*>(&from));
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {

  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerMessage::GetTypeName() const {
  return "loomcomm.ServerMessage";
}


// ===================================================================

bool WorkerCommand_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WorkerCommand_Type WorkerCommand::TASK;
const WorkerCommand_Type WorkerCommand::SEND;
const WorkerCommand_Type WorkerCommand::REMOVE;
const WorkerCommand_Type WorkerCommand::DICTIONARY;
const WorkerCommand_Type WorkerCommand::UPDATE;
const WorkerCommand_Type WorkerCommand::Type_MIN;
const WorkerCommand_Type WorkerCommand::Type_MAX;
const int WorkerCommand::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WorkerCommand::kTypeFieldNumber;
const int WorkerCommand::kIdFieldNumber;
const int WorkerCommand::kTaskTypeFieldNumber;
const int WorkerCommand::kTaskConfigFieldNumber;
const int WorkerCommand::kTaskInputsFieldNumber;
const int WorkerCommand::kNCpusFieldNumber;
const int WorkerCommand::kAddressFieldNumber;
const int WorkerCommand::kSymbolsFieldNumber;
const int WorkerCommand::kTracePathFieldNumber;
const int WorkerCommand::kWorkerIdFieldNumber;
#endif  // !_MSC_VER

WorkerCommand::WorkerCommand()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.WorkerCommand)
}

void WorkerCommand::InitAsDefaultInstance() {
}

WorkerCommand::WorkerCommand(const WorkerCommand& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.WorkerCommand)
}

void WorkerCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  task_type_ = 0;
  task_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  n_cpus_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worker_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerCommand::~WorkerCommand() {
  // @@protoc_insertion_point(destructor:loomcomm.WorkerCommand)
  SharedDtor();
}

void WorkerCommand::SharedDtor() {
  if (task_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_config_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (trace_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WorkerCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorkerCommand& WorkerCommand::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

WorkerCommand* WorkerCommand::default_instance_ = NULL;

WorkerCommand* WorkerCommand::New() const {
  return new WorkerCommand;
}

void WorkerCommand::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkerCommand*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(task_type_, n_cpus_);
    type_ = 1;
    id_ = 0;
    if (has_task_config()) {
      if (task_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_config_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_trace_path()) {
      if (trace_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trace_path_->clear();
      }
    }
    worker_id_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  task_inputs_.Clear();
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool WorkerCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.WorkerCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .loomcomm.WorkerCommand.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::loomcomm::WorkerCommand_Type_IsValid(value)) {
            set_type(static_cast< ::loomcomm::WorkerCommand_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_task_type;
        break;
      }

      // optional int32 task_type = 3;
      case 3: {
        if (tag == 24) {
         parse_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_type_)));
          set_has_task_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_task_config;
        break;
      }

      // optional string task_config = 4;
      case 4: {
        if (tag == 34) {
         parse_task_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_task_inputs;
        break;
      }

      // repeated int32 task_inputs = 5;
      case 5: {
        if (tag == 40) {
         parse_task_inputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_task_inputs())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_task_inputs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_task_inputs;
        if (input->ExpectTag(48)) goto parse_n_cpus;
        break;
      }

      // optional int32 n_cpus = 6;
      case 6: {
        if (tag == 48) {
         parse_n_cpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_cpus_)));
          set_has_n_cpus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_address;
        break;
      }

      // optional string address = 10;
      case 10: {
        if (tag == 82) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_symbols;
        break;
      }

      // repeated string symbols = 100;
      case 100: {
        if (tag == 802) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_symbols;
        if (input->ExpectTag(962)) goto parse_trace_path;
        break;
      }

      // optional string trace_path = 120;
      case 120: {
        if (tag == 962) {
         parse_trace_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(968)) goto parse_worker_id;
        break;
      }

      // optional int32 worker_id = 121;
      case 121: {
        if (tag == 968) {
         parse_worker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_id_)));
          set_has_worker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.WorkerCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.WorkerCommand)
  return false;
#undef DO_
}

void WorkerCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.WorkerCommand)
  // required .loomcomm.WorkerCommand.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 task_type = 3;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_type(), output);
  }

  // optional string task_config = 4;
  if (has_task_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->task_config(), output);
  }

  // repeated int32 task_inputs = 5;
  for (int i = 0; i < this->task_inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->task_inputs(i), output);
  }

  // optional int32 n_cpus = 6;
  if (has_n_cpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->n_cpus(), output);
  }

  // optional string address = 10;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->address(), output);
  }

  // repeated string symbols = 100;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->symbols(i), output);
  }

  // optional string trace_path = 120;
  if (has_trace_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->trace_path(), output);
  }

  // optional int32 worker_id = 121;
  if (has_worker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(121, this->worker_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.WorkerCommand)
}

int WorkerCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .loomcomm.WorkerCommand.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 task_type = 3;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_type());
    }

    // optional string task_config = 4;
    if (has_task_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_config());
    }

    // optional int32 n_cpus = 6;
    if (has_n_cpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_cpus());
    }

    // optional string address = 10;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string trace_path = 120;
    if (has_trace_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trace_path());
    }

    // optional int32 worker_id = 121;
    if (has_worker_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_id());
    }

  }
  // repeated int32 task_inputs = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_inputs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->task_inputs(i));
    }
    total_size += 1 * this->task_inputs_size() + data_size;
  }

  // repeated string symbols = 100;
  total_size += 2 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorkerCommand*>(&from));
}

void WorkerCommand::MergeFrom(const WorkerCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_inputs_.MergeFrom(from.task_inputs_);
  symbols_.MergeFrom(from.symbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_task_config()) {
      set_task_config(from.task_config());
    }
    if (from.has_n_cpus()) {
      set_n_cpus(from.n_cpus());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trace_path()) {
      set_trace_path(from.trace_path());
    }
    if (from.has_worker_id()) {
      set_worker_id(from.worker_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void WorkerCommand::CopyFrom(const WorkerCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WorkerCommand::Swap(WorkerCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(task_type_, other->task_type_);
    std::swap(task_config_, other->task_config_);
    task_inputs_.Swap(&other->task_inputs_);
    std::swap(n_cpus_, other->n_cpus_);
    std::swap(address_, other->address_);
    symbols_.Swap(&other->symbols_);
    std::swap(trace_path_, other->trace_path_);
    std::swap(worker_id_, other->worker_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorkerCommand::GetTypeName() const {
  return "loomcomm.WorkerCommand";
}


// ===================================================================

bool WorkerResponse_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WorkerResponse_Type WorkerResponse::FINISHED;
const WorkerResponse_Type WorkerResponse::TRANSFERED;
const WorkerResponse_Type WorkerResponse::FAILED;
const WorkerResponse_Type WorkerResponse::Type_MIN;
const WorkerResponse_Type WorkerResponse::Type_MAX;
const int WorkerResponse::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WorkerResponse::kTypeFieldNumber;
const int WorkerResponse::kIdFieldNumber;
const int WorkerResponse::kSizeFieldNumber;
const int WorkerResponse::kLengthFieldNumber;
const int WorkerResponse::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

WorkerResponse::WorkerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.WorkerResponse)
}

void WorkerResponse::InitAsDefaultInstance() {
}

WorkerResponse::WorkerResponse(const WorkerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.WorkerResponse)
}

void WorkerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  length_ = GOOGLE_ULONGLONG(0);
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerResponse::~WorkerResponse() {
  // @@protoc_insertion_point(destructor:loomcomm.WorkerResponse)
  SharedDtor();
}

void WorkerResponse::SharedDtor() {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WorkerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorkerResponse& WorkerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

WorkerResponse* WorkerResponse::default_instance_ = NULL;

WorkerResponse* WorkerResponse::New() const {
  return new WorkerResponse;
}

void WorkerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, length_);
    type_ = 1;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool WorkerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.WorkerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .loomcomm.WorkerResponse.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::loomcomm::WorkerResponse_Type_IsValid(value)) {
            set_type(static_cast< ::loomcomm::WorkerResponse_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional uint64 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional uint64 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 100;
      case 100: {
        if (tag == 802) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.WorkerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.WorkerResponse)
  return false;
#undef DO_
}

void WorkerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.WorkerResponse)
  // required .loomcomm.WorkerResponse.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // optional uint64 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->length(), output);
  }

  // optional string error_msg = 100;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->error_msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.WorkerResponse)
}

int WorkerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .loomcomm.WorkerResponse.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }

    // optional string error_msg = 100;
    if (has_error_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorkerResponse*>(&from));
}

void WorkerResponse::MergeFrom(const WorkerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void WorkerResponse::CopyFrom(const WorkerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WorkerResponse::Swap(WorkerResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    std::swap(length_, other->length_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorkerResponse::GetTypeName() const {
  return "loomcomm.WorkerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int Announce::kPortFieldNumber;
#endif  // !_MSC_VER

Announce::Announce()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.Announce)
}

void Announce::InitAsDefaultInstance() {
}

Announce::Announce(const Announce& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.Announce)
}

void Announce::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Announce::~Announce() {
  // @@protoc_insertion_point(destructor:loomcomm.Announce)
  SharedDtor();
}

void Announce::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Announce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Announce& Announce::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

Announce* Announce::default_instance_ = NULL;

Announce* Announce::New() const {
  return new Announce;
}

void Announce::Clear() {
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Announce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.Announce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.Announce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.Announce)
  return false;
#undef DO_
}

void Announce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.Announce)
  // required int32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.Announce)
}

int Announce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Announce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Announce*>(&from));
}

void Announce::MergeFrom(const Announce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Announce::CopyFrom(const Announce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Announce::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Announce::Swap(Announce* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Announce::GetTypeName() const {
  return "loomcomm.Announce";
}


// ===================================================================

#ifndef _MSC_VER
const int DataHeader::kIdFieldNumber;
const int DataHeader::kTypeIdFieldNumber;
const int DataHeader::kNMessagesFieldNumber;
#endif  // !_MSC_VER

DataHeader::DataHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.DataHeader)
}

void DataHeader::InitAsDefaultInstance() {
}

DataHeader::DataHeader(const DataHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.DataHeader)
}

void DataHeader::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_id_ = 0;
  n_messages_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataHeader::~DataHeader() {
  // @@protoc_insertion_point(destructor:loomcomm.DataHeader)
  SharedDtor();
}

void DataHeader::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataHeader& DataHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

DataHeader* DataHeader::default_instance_ = NULL;

DataHeader* DataHeader::New() const {
  return new DataHeader;
}

void DataHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, n_messages_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.DataHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_n_messages;
        break;
      }

      // required int64 n_messages = 2;
      case 2: {
        if (tag == 16) {
         parse_n_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &n_messages_)));
          set_has_n_messages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type_id;
        break;
      }

      // required int32 type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.DataHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.DataHeader)
  return false;
#undef DO_
}

void DataHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.DataHeader)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 n_messages = 2;
  if (has_n_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->n_messages(), output);
  }

  // required int32 type_id = 3;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.DataHeader)
}

int DataHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type_id = 3;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // required int64 n_messages = 2;
    if (has_n_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->n_messages());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataHeader*>(&from));
}

void DataHeader::MergeFrom(const DataHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_n_messages()) {
      set_n_messages(from.n_messages());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataHeader::CopyFrom(const DataHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataHeader::Swap(DataHeader* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_id_, other->type_id_);
    std::swap(n_messages_, other->n_messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataHeader::GetTypeName() const {
  return "loomcomm.DataHeader";
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kIdFieldNumber;
const int Error::kWorkerFieldNumber;
const int Error::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  worker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:loomcomm.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (worker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete worker_;
  }
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_msg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Error& Error::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    if (has_worker()) {
      if (worker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        worker_->clear();
      }
    }
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_worker;
        break;
      }

      // required string worker = 2;
      case 2: {
        if (tag == 18) {
         parse_worker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // required string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.Error)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string worker = 2;
  if (has_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->worker(), output);
  }

  // required string error_msg = 3;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.Error)
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string worker = 2;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->worker());
    }

    // required string error_msg = 3;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Error*>(&from));
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_worker()) {
      set_worker(from.worker());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(worker_, other->worker_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Error::GetTypeName() const {
  return "loomcomm.Error";
}


// ===================================================================

#ifndef _MSC_VER
const int Stats::kNWorkersFieldNumber;
const int Stats::kNDataObjectsFieldNumber;
#endif  // !_MSC_VER

Stats::Stats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.Stats)
}

void Stats::InitAsDefaultInstance() {
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.Stats)
}

void Stats::SharedCtor() {
  _cached_size_ = 0;
  n_workers_ = 0;
  n_data_objects_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:loomcomm.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Stats& Stats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New() const {
  return new Stats;
}

void Stats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Stats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(n_workers_, n_data_objects_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 n_workers = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_workers_)));
          set_has_n_workers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_n_data_objects;
        break;
      }

      // optional int32 n_data_objects = 2;
      case 2: {
        if (tag == 16) {
         parse_n_data_objects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_data_objects_)));
          set_has_n_data_objects();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.Stats)
  // optional int32 n_workers = 1;
  if (has_n_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->n_workers(), output);
  }

  // optional int32 n_data_objects = 2;
  if (has_n_data_objects()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->n_data_objects(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.Stats)
}

int Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 n_workers = 1;
    if (has_n_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_workers());
    }

    // optional int32 n_data_objects = 2;
    if (has_n_data_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_data_objects());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Stats*>(&from));
}

void Stats::MergeFrom(const Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n_workers()) {
      set_n_workers(from.n_workers());
    }
    if (from.has_n_data_objects()) {
      set_n_data_objects(from.n_data_objects());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Stats::CopyFrom(const Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {

  return true;
}

void Stats::Swap(Stats* other) {
  if (other != this) {
    std::swap(n_workers_, other->n_workers_);
    std::swap(n_data_objects_, other->n_data_objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Stats::GetTypeName() const {
  return "loomcomm.Stats";
}


// ===================================================================

bool ClientResponse_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientResponse_Type ClientResponse::DATA;
const ClientResponse_Type ClientResponse::ERROR;
const ClientResponse_Type ClientResponse::DICTIONARY;
const ClientResponse_Type ClientResponse::STATS;
const ClientResponse_Type ClientResponse::Type_MIN;
const ClientResponse_Type ClientResponse::Type_MAX;
const int ClientResponse::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientResponse::kTypeFieldNumber;
const int ClientResponse::kDataFieldNumber;
const int ClientResponse::kErrorFieldNumber;
const int ClientResponse::kSymbolsFieldNumber;
const int ClientResponse::kStatsFieldNumber;
#endif  // !_MSC_VER

ClientResponse::ClientResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.ClientResponse)
}

void ClientResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  data_ = const_cast< ::loomcomm::DataHeader*>(
      ::loomcomm::DataHeader::internal_default_instance());
#else
  data_ = const_cast< ::loomcomm::DataHeader*>(&::loomcomm::DataHeader::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  error_ = const_cast< ::loomcomm::Error*>(
      ::loomcomm::Error::internal_default_instance());
#else
  error_ = const_cast< ::loomcomm::Error*>(&::loomcomm::Error::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_ = const_cast< ::loomcomm::Stats*>(
      ::loomcomm::Stats::internal_default_instance());
#else
  stats_ = const_cast< ::loomcomm::Stats*>(&::loomcomm::Stats::default_instance());
#endif
}

ClientResponse::ClientResponse(const ClientResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.ClientResponse)
}

void ClientResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  data_ = NULL;
  error_ = NULL;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientResponse::~ClientResponse() {
  // @@protoc_insertion_point(destructor:loomcomm.ClientResponse)
  SharedDtor();
}

void ClientResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete data_;
    delete error_;
    delete stats_;
  }
}

void ClientResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientResponse& ClientResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

ClientResponse* ClientResponse::default_instance_ = NULL;

ClientResponse* ClientResponse::New() const {
  return new ClientResponse;
}

void ClientResponse::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    type_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::loomcomm::DataHeader::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::loomcomm::Error::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::loomcomm::Stats::Clear();
    }
  }
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.ClientResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .loomcomm.ClientResponse.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::loomcomm::ClientResponse_Type_IsValid(value)) {
            set_type(static_cast< ::loomcomm::ClientResponse_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .loomcomm.DataHeader data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional .loomcomm.Error error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_symbols;
        break;
      }

      // repeated string symbols = 5;
      case 5: {
        if (tag == 42) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_symbols;
        if (input->ExpectTag(50)) goto parse_stats;
        break;
      }

      // optional .loomcomm.Stats stats = 6;
      case 6: {
        if (tag == 50) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.ClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.ClientResponse)
  return false;
#undef DO_
}

void ClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.ClientResponse)
  // required .loomcomm.ClientResponse.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .loomcomm.DataHeader data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->data(), output);
  }

  // optional .loomcomm.Error error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->error(), output);
  }

  // repeated string symbols = 5;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->symbols(i), output);
  }

  // optional .loomcomm.Stats stats = 6;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->stats(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.ClientResponse)
}

int ClientResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .loomcomm.ClientResponse.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .loomcomm.DataHeader data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .loomcomm.Error error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional .loomcomm.Stats stats = 6;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  // repeated string symbols = 5;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientResponse*>(&from));
}

void ClientResponse::MergeFrom(const ClientResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::loomcomm::DataHeader::MergeFrom(from.data());
    }
    if (from.has_error()) {
      mutable_error()->::loomcomm::Error::MergeFrom(from.error());
    }
    if (from.has_stats()) {
      mutable_stats()->::loomcomm::Stats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientResponse::CopyFrom(const ClientResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ClientResponse::Swap(ClientResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(error_, other->error_);
    symbols_.Swap(&other->symbols_);
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientResponse::GetTypeName() const {
  return "loomcomm.ClientResponse";
}


// ===================================================================

bool ClientRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientRequest_Type ClientRequest::PLAN;
const ClientRequest_Type ClientRequest::STATS;
const ClientRequest_Type ClientRequest::TRACE;
const ClientRequest_Type ClientRequest::TERMINATE;
const ClientRequest_Type ClientRequest::Type_MIN;
const ClientRequest_Type ClientRequest::Type_MAX;
const int ClientRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientRequest::kTypeFieldNumber;
const int ClientRequest::kPlanFieldNumber;
const int ClientRequest::kTracePathFieldNumber;
#endif  // !_MSC_VER

ClientRequest::ClientRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loomcomm.ClientRequest)
}

void ClientRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  plan_ = const_cast< ::loomplan::Plan*>(
      ::loomplan::Plan::internal_default_instance());
#else
  plan_ = const_cast< ::loomplan::Plan*>(&::loomplan::Plan::default_instance());
#endif
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loomcomm.ClientRequest)
}

void ClientRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  plan_ = NULL;
  trace_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:loomcomm.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (trace_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete plan_;
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientRequest& ClientRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_loomcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_loomcomm_2eproto();
#endif
  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New() const {
  return new ClientRequest;
}

void ClientRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_plan()) {
      if (plan_ != NULL) plan_->::loomplan::Plan::Clear();
    }
    if (has_trace_path()) {
      if (trace_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trace_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:loomcomm.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .loomcomm.ClientRequest.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::loomcomm::ClientRequest_Type_IsValid(value)) {
            set_type(static_cast< ::loomcomm::ClientRequest_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_plan;
        break;
      }

      // optional .loomplan.Plan plan = 2;
      case 2: {
        if (tag == 18) {
         parse_plan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_trace_path;
        break;
      }

      // optional string trace_path = 6;
      case 6: {
        if (tag == 50) {
         parse_trace_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loomcomm.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loomcomm.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loomcomm.ClientRequest)
  // required .loomcomm.ClientRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .loomplan.Plan plan = 2;
  if (has_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->plan(), output);
  }

  // optional string trace_path = 6;
  if (has_trace_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trace_path(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:loomcomm.ClientRequest)
}

int ClientRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .loomcomm.ClientRequest.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .loomplan.Plan plan = 2;
    if (has_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plan());
    }

    // optional string trace_path = 6;
    if (has_trace_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trace_path());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientRequest*>(&from));
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_plan()) {
      mutable_plan()->::loomplan::Plan::MergeFrom(from.plan());
    }
    if (from.has_trace_path()) {
      set_trace_path(from.trace_path());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_plan()) {
    if (!this->plan().IsInitialized()) return false;
  }
  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(plan_, other->plan_);
    std::swap(trace_path_, other->trace_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientRequest::GetTypeName() const {
  return "loomcomm.ClientRequest";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loomcomm

// @@protoc_insertion_point(global_scope)
