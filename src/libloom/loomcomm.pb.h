// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loomcomm.proto

#ifndef PROTOBUF_loomcomm_2eproto__INCLUDED
#define PROTOBUF_loomcomm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace loomcomm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loomcomm_2eproto();
void protobuf_AssignDesc_loomcomm_2eproto();
void protobuf_ShutdownFile_loomcomm_2eproto();

class Register;
class ServerMessage;
class WorkerCommand;
class WorkerResponse;
class Announce;
class DataPrologue;
class Data;
class Info;
class ClientMessage;

enum Register_Type {
  Register_Type_REGISTER_WORKER = 1,
  Register_Type_REGISTER_CLIENT = 2
};
bool Register_Type_IsValid(int value);
const Register_Type Register_Type_Type_MIN = Register_Type_REGISTER_WORKER;
const Register_Type Register_Type_Type_MAX = Register_Type_REGISTER_CLIENT;
const int Register_Type_Type_ARRAYSIZE = Register_Type_Type_MAX + 1;

enum ServerMessage_Type {
  ServerMessage_Type_START_JOB = 1
};
bool ServerMessage_Type_IsValid(int value);
const ServerMessage_Type ServerMessage_Type_Type_MIN = ServerMessage_Type_START_JOB;
const ServerMessage_Type ServerMessage_Type_Type_MAX = ServerMessage_Type_START_JOB;
const int ServerMessage_Type_Type_ARRAYSIZE = ServerMessage_Type_Type_MAX + 1;

enum WorkerCommand_Type {
  WorkerCommand_Type_TASK = 1,
  WorkerCommand_Type_SEND = 2
};
bool WorkerCommand_Type_IsValid(int value);
const WorkerCommand_Type WorkerCommand_Type_Type_MIN = WorkerCommand_Type_TASK;
const WorkerCommand_Type WorkerCommand_Type_Type_MAX = WorkerCommand_Type_SEND;
const int WorkerCommand_Type_Type_ARRAYSIZE = WorkerCommand_Type_Type_MAX + 1;

enum ClientMessage_Type {
  ClientMessage_Type_DATA = 1,
  ClientMessage_Type_INFO = 2
};
bool ClientMessage_Type_IsValid(int value);
const ClientMessage_Type ClientMessage_Type_Type_MIN = ClientMessage_Type_DATA;
const ClientMessage_Type ClientMessage_Type_Type_MAX = ClientMessage_Type_INFO;
const int ClientMessage_Type_Type_ARRAYSIZE = ClientMessage_Type_Type_MAX + 1;

// ===================================================================

class Register : public ::google::protobuf::MessageLite {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Register& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Register* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Register* other);

  // implements Message ----------------------------------------------

  Register* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Register_Type Type;
  static const Type REGISTER_WORKER = Register_Type_REGISTER_WORKER;
  static const Type REGISTER_CLIENT = Register_Type_REGISTER_CLIENT;
  static inline bool Type_IsValid(int value) {
    return Register_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Register_Type_Type_MIN;
  static const Type Type_MAX =
    Register_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Register_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::int32 value);

  // required .loomcomm.Register.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::loomcomm::Register_Type type() const;
  inline void set_type(::loomcomm::Register_Type value);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // repeated string task_types = 4;
  inline int task_types_size() const;
  inline void clear_task_types();
  static const int kTaskTypesFieldNumber = 4;
  inline const ::std::string& task_types(int index) const;
  inline ::std::string* mutable_task_types(int index);
  inline void set_task_types(int index, const ::std::string& value);
  inline void set_task_types(int index, const char* value);
  inline void set_task_types(int index, const char* value, size_t size);
  inline ::std::string* add_task_types();
  inline void add_task_types(const ::std::string& value);
  inline void add_task_types(const char* value);
  inline void add_task_types(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& task_types() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_task_types();

  // optional int32 cpus = 5;
  inline bool has_cpus() const;
  inline void clear_cpus();
  static const int kCpusFieldNumber = 5;
  inline ::google::protobuf::int32 cpus() const;
  inline void set_cpus(::google::protobuf::int32 value);

  // optional bool info = 10;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 10;
  inline bool info() const;
  inline void set_info(bool value);

  // @@protoc_insertion_point(class_scope:loomcomm.Register)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_cpus();
  inline void clear_has_cpus();
  inline void set_has_info();
  inline void clear_has_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 protocol_version_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> task_types_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 cpus_;
  bool info_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static Register* default_instance_;
};
// -------------------------------------------------------------------

class ServerMessage : public ::google::protobuf::MessageLite {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ServerMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerMessage* other);

  // implements Message ----------------------------------------------

  ServerMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ServerMessage_Type Type;
  static const Type START_JOB = ServerMessage_Type_START_JOB;
  static inline bool Type_IsValid(int value) {
    return ServerMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ServerMessage_Type_Type_MIN;
  static const Type Type_MAX =
    ServerMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ServerMessage_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:loomcomm.ServerMessage)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static ServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class WorkerCommand : public ::google::protobuf::MessageLite {
 public:
  WorkerCommand();
  virtual ~WorkerCommand();

  WorkerCommand(const WorkerCommand& from);

  inline WorkerCommand& operator=(const WorkerCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WorkerCommand& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WorkerCommand* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WorkerCommand* other);

  // implements Message ----------------------------------------------

  WorkerCommand* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WorkerCommand& from);
  void MergeFrom(const WorkerCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef WorkerCommand_Type Type;
  static const Type TASK = WorkerCommand_Type_TASK;
  static const Type SEND = WorkerCommand_Type_SEND;
  static inline bool Type_IsValid(int value) {
    return WorkerCommand_Type_IsValid(value);
  }
  static const Type Type_MIN =
    WorkerCommand_Type_Type_MIN;
  static const Type Type_MAX =
    WorkerCommand_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    WorkerCommand_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .loomcomm.WorkerCommand.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::loomcomm::WorkerCommand_Type type() const;
  inline void set_type(::loomcomm::WorkerCommand_Type value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 task_type = 3;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 3;
  inline ::google::protobuf::int32 task_type() const;
  inline void set_task_type(::google::protobuf::int32 value);

  // optional string task_config = 4;
  inline bool has_task_config() const;
  inline void clear_task_config();
  static const int kTaskConfigFieldNumber = 4;
  inline const ::std::string& task_config() const;
  inline void set_task_config(const ::std::string& value);
  inline void set_task_config(const char* value);
  inline void set_task_config(const char* value, size_t size);
  inline ::std::string* mutable_task_config();
  inline ::std::string* release_task_config();
  inline void set_allocated_task_config(::std::string* task_config);

  // repeated int32 task_inputs = 5;
  inline int task_inputs_size() const;
  inline void clear_task_inputs();
  static const int kTaskInputsFieldNumber = 5;
  inline ::google::protobuf::int32 task_inputs(int index) const;
  inline void set_task_inputs(int index, ::google::protobuf::int32 value);
  inline void add_task_inputs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      task_inputs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_task_inputs();

  // optional string address = 10;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 10;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional bool with_size = 11;
  inline bool has_with_size() const;
  inline void clear_with_size();
  static const int kWithSizeFieldNumber = 11;
  inline bool with_size() const;
  inline void set_with_size(bool value);

  // @@protoc_insertion_point(class_scope:loomcomm.WorkerCommand)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_task_config();
  inline void clear_has_task_config();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_with_size();
  inline void clear_has_with_size();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 id_;
  ::std::string* task_config_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > task_inputs_;
  ::google::protobuf::int32 task_type_;
  bool with_size_;
  ::std::string* address_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static WorkerCommand* default_instance_;
};
// -------------------------------------------------------------------

class WorkerResponse : public ::google::protobuf::MessageLite {
 public:
  WorkerResponse();
  virtual ~WorkerResponse();

  WorkerResponse(const WorkerResponse& from);

  inline WorkerResponse& operator=(const WorkerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WorkerResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WorkerResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WorkerResponse* other);

  // implements Message ----------------------------------------------

  WorkerResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WorkerResponse& from);
  void MergeFrom(const WorkerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:loomcomm.WorkerResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static WorkerResponse* default_instance_;
};
// -------------------------------------------------------------------

class Announce : public ::google::protobuf::MessageLite {
 public:
  Announce();
  virtual ~Announce();

  Announce(const Announce& from);

  inline Announce& operator=(const Announce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Announce& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Announce* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Announce* other);

  // implements Message ----------------------------------------------

  Announce* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Announce& from);
  void MergeFrom(const Announce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:loomcomm.Announce)
 private:
  inline void set_has_port();
  inline void clear_has_port();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 port_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static Announce* default_instance_;
};
// -------------------------------------------------------------------

class DataPrologue : public ::google::protobuf::MessageLite {
 public:
  DataPrologue();
  virtual ~DataPrologue();

  DataPrologue(const DataPrologue& from);

  inline DataPrologue& operator=(const DataPrologue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DataPrologue& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DataPrologue* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DataPrologue* other);

  // implements Message ----------------------------------------------

  DataPrologue* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DataPrologue& from);
  void MergeFrom(const DataPrologue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 data_size = 3;
  inline bool has_data_size() const;
  inline void clear_data_size();
  static const int kDataSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 data_size() const;
  inline void set_data_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:loomcomm.DataPrologue)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data_size();
  inline void clear_has_data_size();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 data_size_;
  ::google::protobuf::int32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static DataPrologue* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::MessageLite {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Data& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Data* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:loomcomm.Data)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_size();
  inline void clear_has_size();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int32 type_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class Info : public ::google::protobuf::MessageLite {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Info& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Info* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Info* other);

  // implements Message ----------------------------------------------

  Info* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string worker = 2;
  inline bool has_worker() const;
  inline void clear_worker();
  static const int kWorkerFieldNumber = 2;
  inline const ::std::string& worker() const;
  inline void set_worker(const ::std::string& value);
  inline void set_worker(const char* value);
  inline void set_worker(const char* value, size_t size);
  inline ::std::string* mutable_worker();
  inline ::std::string* release_worker();
  inline void set_allocated_worker(::std::string* worker);

  // @@protoc_insertion_point(class_scope:loomcomm.Info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_worker();
  inline void clear_has_worker();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* worker_;
  ::google::protobuf::int32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// -------------------------------------------------------------------

class ClientMessage : public ::google::protobuf::MessageLite {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ClientMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ClientMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ClientMessage* other);

  // implements Message ----------------------------------------------

  ClientMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ClientMessage_Type Type;
  static const Type DATA = ClientMessage_Type_DATA;
  static const Type INFO = ClientMessage_Type_INFO;
  static inline bool Type_IsValid(int value) {
    return ClientMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ClientMessage_Type_Type_MIN;
  static const Type Type_MAX =
    ClientMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ClientMessage_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .loomcomm.ClientMessage.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::loomcomm::ClientMessage_Type type() const;
  inline void set_type(::loomcomm::ClientMessage_Type value);

  // optional .loomcomm.DataPrologue data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::loomcomm::DataPrologue& data() const;
  inline ::loomcomm::DataPrologue* mutable_data();
  inline ::loomcomm::DataPrologue* release_data();
  inline void set_allocated_data(::loomcomm::DataPrologue* data);

  // optional .loomcomm.Info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::loomcomm::Info& info() const;
  inline ::loomcomm::Info* mutable_info();
  inline ::loomcomm::Info* release_info();
  inline void set_allocated_info(::loomcomm::Info* info);

  // @@protoc_insertion_point(class_scope:loomcomm.ClientMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_info();
  inline void clear_has_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::loomcomm::DataPrologue* data_;
  ::loomcomm::Info* info_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomcomm_2eproto();
  friend void protobuf_ShutdownFile_loomcomm_2eproto();

  void InitAsDefaultInstance();
  static ClientMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// Register

// required int32 protocol_version = 1;
inline bool Register::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::google::protobuf::int32 Register::protocol_version() const {
  // @@protoc_insertion_point(field_get:loomcomm.Register.protocol_version)
  return protocol_version_;
}
inline void Register::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Register.protocol_version)
}

// required .loomcomm.Register.Type type = 2;
inline bool Register::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::loomcomm::Register_Type Register::type() const {
  // @@protoc_insertion_point(field_get:loomcomm.Register.type)
  return static_cast< ::loomcomm::Register_Type >(type_);
}
inline void Register::set_type(::loomcomm::Register_Type value) {
  assert(::loomcomm::Register_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Register.type)
}

// optional int32 port = 3;
inline bool Register::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Register::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Register::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Register::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Register::port() const {
  // @@protoc_insertion_point(field_get:loomcomm.Register.port)
  return port_;
}
inline void Register::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Register.port)
}

// repeated string task_types = 4;
inline int Register::task_types_size() const {
  return task_types_.size();
}
inline void Register::clear_task_types() {
  task_types_.Clear();
}
inline const ::std::string& Register::task_types(int index) const {
  // @@protoc_insertion_point(field_get:loomcomm.Register.task_types)
  return task_types_.Get(index);
}
inline ::std::string* Register::mutable_task_types(int index) {
  // @@protoc_insertion_point(field_mutable:loomcomm.Register.task_types)
  return task_types_.Mutable(index);
}
inline void Register::set_task_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:loomcomm.Register.task_types)
  task_types_.Mutable(index)->assign(value);
}
inline void Register::set_task_types(int index, const char* value) {
  task_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:loomcomm.Register.task_types)
}
inline void Register::set_task_types(int index, const char* value, size_t size) {
  task_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomcomm.Register.task_types)
}
inline ::std::string* Register::add_task_types() {
  return task_types_.Add();
}
inline void Register::add_task_types(const ::std::string& value) {
  task_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:loomcomm.Register.task_types)
}
inline void Register::add_task_types(const char* value) {
  task_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:loomcomm.Register.task_types)
}
inline void Register::add_task_types(const char* value, size_t size) {
  task_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:loomcomm.Register.task_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Register::task_types() const {
  // @@protoc_insertion_point(field_list:loomcomm.Register.task_types)
  return task_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Register::mutable_task_types() {
  // @@protoc_insertion_point(field_mutable_list:loomcomm.Register.task_types)
  return &task_types_;
}

// optional int32 cpus = 5;
inline bool Register::has_cpus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Register::set_has_cpus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Register::clear_has_cpus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Register::clear_cpus() {
  cpus_ = 0;
  clear_has_cpus();
}
inline ::google::protobuf::int32 Register::cpus() const {
  // @@protoc_insertion_point(field_get:loomcomm.Register.cpus)
  return cpus_;
}
inline void Register::set_cpus(::google::protobuf::int32 value) {
  set_has_cpus();
  cpus_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Register.cpus)
}

// optional bool info = 10;
inline bool Register::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Register::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Register::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Register::clear_info() {
  info_ = false;
  clear_has_info();
}
inline bool Register::info() const {
  // @@protoc_insertion_point(field_get:loomcomm.Register.info)
  return info_;
}
inline void Register::set_info(bool value) {
  set_has_info();
  info_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Register.info)
}

// -------------------------------------------------------------------

// ServerMessage

// -------------------------------------------------------------------

// WorkerCommand

// required .loomcomm.WorkerCommand.Type type = 1;
inline bool WorkerCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkerCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkerCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkerCommand::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::loomcomm::WorkerCommand_Type WorkerCommand::type() const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerCommand.type)
  return static_cast< ::loomcomm::WorkerCommand_Type >(type_);
}
inline void WorkerCommand::set_type(::loomcomm::WorkerCommand_Type value) {
  assert(::loomcomm::WorkerCommand_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.WorkerCommand.type)
}

// optional int32 id = 2;
inline bool WorkerCommand::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkerCommand::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkerCommand::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkerCommand::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 WorkerCommand::id() const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerCommand.id)
  return id_;
}
inline void WorkerCommand::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.WorkerCommand.id)
}

// optional int32 task_type = 3;
inline bool WorkerCommand::has_task_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorkerCommand::set_has_task_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorkerCommand::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorkerCommand::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
inline ::google::protobuf::int32 WorkerCommand::task_type() const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerCommand.task_type)
  return task_type_;
}
inline void WorkerCommand::set_task_type(::google::protobuf::int32 value) {
  set_has_task_type();
  task_type_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.WorkerCommand.task_type)
}

// optional string task_config = 4;
inline bool WorkerCommand::has_task_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorkerCommand::set_has_task_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorkerCommand::clear_has_task_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorkerCommand::clear_task_config() {
  if (task_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_config_->clear();
  }
  clear_has_task_config();
}
inline const ::std::string& WorkerCommand::task_config() const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerCommand.task_config)
  return *task_config_;
}
inline void WorkerCommand::set_task_config(const ::std::string& value) {
  set_has_task_config();
  if (task_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_config_ = new ::std::string;
  }
  task_config_->assign(value);
  // @@protoc_insertion_point(field_set:loomcomm.WorkerCommand.task_config)
}
inline void WorkerCommand::set_task_config(const char* value) {
  set_has_task_config();
  if (task_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_config_ = new ::std::string;
  }
  task_config_->assign(value);
  // @@protoc_insertion_point(field_set_char:loomcomm.WorkerCommand.task_config)
}
inline void WorkerCommand::set_task_config(const char* value, size_t size) {
  set_has_task_config();
  if (task_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_config_ = new ::std::string;
  }
  task_config_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomcomm.WorkerCommand.task_config)
}
inline ::std::string* WorkerCommand::mutable_task_config() {
  set_has_task_config();
  if (task_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_config_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:loomcomm.WorkerCommand.task_config)
  return task_config_;
}
inline ::std::string* WorkerCommand::release_task_config() {
  clear_has_task_config();
  if (task_config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_config_;
    task_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorkerCommand::set_allocated_task_config(::std::string* task_config) {
  if (task_config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_config_;
  }
  if (task_config) {
    set_has_task_config();
    task_config_ = task_config;
  } else {
    clear_has_task_config();
    task_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:loomcomm.WorkerCommand.task_config)
}

// repeated int32 task_inputs = 5;
inline int WorkerCommand::task_inputs_size() const {
  return task_inputs_.size();
}
inline void WorkerCommand::clear_task_inputs() {
  task_inputs_.Clear();
}
inline ::google::protobuf::int32 WorkerCommand::task_inputs(int index) const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerCommand.task_inputs)
  return task_inputs_.Get(index);
}
inline void WorkerCommand::set_task_inputs(int index, ::google::protobuf::int32 value) {
  task_inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:loomcomm.WorkerCommand.task_inputs)
}
inline void WorkerCommand::add_task_inputs(::google::protobuf::int32 value) {
  task_inputs_.Add(value);
  // @@protoc_insertion_point(field_add:loomcomm.WorkerCommand.task_inputs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkerCommand::task_inputs() const {
  // @@protoc_insertion_point(field_list:loomcomm.WorkerCommand.task_inputs)
  return task_inputs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkerCommand::mutable_task_inputs() {
  // @@protoc_insertion_point(field_mutable_list:loomcomm.WorkerCommand.task_inputs)
  return &task_inputs_;
}

// optional string address = 10;
inline bool WorkerCommand::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorkerCommand::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WorkerCommand::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WorkerCommand::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& WorkerCommand::address() const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerCommand.address)
  return *address_;
}
inline void WorkerCommand::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:loomcomm.WorkerCommand.address)
}
inline void WorkerCommand::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:loomcomm.WorkerCommand.address)
}
inline void WorkerCommand::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomcomm.WorkerCommand.address)
}
inline ::std::string* WorkerCommand::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:loomcomm.WorkerCommand.address)
  return address_;
}
inline ::std::string* WorkerCommand::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorkerCommand::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:loomcomm.WorkerCommand.address)
}

// optional bool with_size = 11;
inline bool WorkerCommand::has_with_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WorkerCommand::set_has_with_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WorkerCommand::clear_has_with_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WorkerCommand::clear_with_size() {
  with_size_ = false;
  clear_has_with_size();
}
inline bool WorkerCommand::with_size() const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerCommand.with_size)
  return with_size_;
}
inline void WorkerCommand::set_with_size(bool value) {
  set_has_with_size();
  with_size_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.WorkerCommand.with_size)
}

// -------------------------------------------------------------------

// WorkerResponse

// optional int32 id = 2;
inline bool WorkerResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkerResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkerResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkerResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 WorkerResponse::id() const {
  // @@protoc_insertion_point(field_get:loomcomm.WorkerResponse.id)
  return id_;
}
inline void WorkerResponse::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.WorkerResponse.id)
}

// -------------------------------------------------------------------

// Announce

// required int32 port = 1;
inline bool Announce::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Announce::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Announce::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Announce::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Announce::port() const {
  // @@protoc_insertion_point(field_get:loomcomm.Announce.port)
  return port_;
}
inline void Announce::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Announce.port)
}

// -------------------------------------------------------------------

// DataPrologue

// required int32 id = 1;
inline bool DataPrologue::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataPrologue::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataPrologue::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataPrologue::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DataPrologue::id() const {
  // @@protoc_insertion_point(field_get:loomcomm.DataPrologue.id)
  return id_;
}
inline void DataPrologue::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.DataPrologue.id)
}

// optional uint64 data_size = 3;
inline bool DataPrologue::has_data_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPrologue::set_has_data_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPrologue::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPrologue::clear_data_size() {
  data_size_ = GOOGLE_ULONGLONG(0);
  clear_has_data_size();
}
inline ::google::protobuf::uint64 DataPrologue::data_size() const {
  // @@protoc_insertion_point(field_get:loomcomm.DataPrologue.data_size)
  return data_size_;
}
inline void DataPrologue::set_data_size(::google::protobuf::uint64 value) {
  set_has_data_size();
  data_size_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.DataPrologue.data_size)
}

// -------------------------------------------------------------------

// Data

// required int32 type_id = 1;
inline bool Data::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 Data::type_id() const {
  // @@protoc_insertion_point(field_get:loomcomm.Data.type_id)
  return type_id_;
}
inline void Data::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Data.type_id)
}

// optional uint64 size = 2;
inline bool Data::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 Data::size() const {
  // @@protoc_insertion_point(field_get:loomcomm.Data.size)
  return size_;
}
inline void Data::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Data.size)
}

// -------------------------------------------------------------------

// Info

// required int32 id = 1;
inline bool Info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Info::id() const {
  // @@protoc_insertion_point(field_get:loomcomm.Info.id)
  return id_;
}
inline void Info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.Info.id)
}

// required string worker = 2;
inline bool Info::has_worker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info::set_has_worker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info::clear_has_worker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info::clear_worker() {
  if (worker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    worker_->clear();
  }
  clear_has_worker();
}
inline const ::std::string& Info::worker() const {
  // @@protoc_insertion_point(field_get:loomcomm.Info.worker)
  return *worker_;
}
inline void Info::set_worker(const ::std::string& value) {
  set_has_worker();
  if (worker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
  // @@protoc_insertion_point(field_set:loomcomm.Info.worker)
}
inline void Info::set_worker(const char* value) {
  set_has_worker();
  if (worker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    worker_ = new ::std::string;
  }
  worker_->assign(value);
  // @@protoc_insertion_point(field_set_char:loomcomm.Info.worker)
}
inline void Info::set_worker(const char* value, size_t size) {
  set_has_worker();
  if (worker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    worker_ = new ::std::string;
  }
  worker_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomcomm.Info.worker)
}
inline ::std::string* Info::mutable_worker() {
  set_has_worker();
  if (worker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    worker_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:loomcomm.Info.worker)
  return worker_;
}
inline ::std::string* Info::release_worker() {
  clear_has_worker();
  if (worker_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = worker_;
    worker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Info::set_allocated_worker(::std::string* worker) {
  if (worker_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete worker_;
  }
  if (worker) {
    set_has_worker();
    worker_ = worker;
  } else {
    clear_has_worker();
    worker_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:loomcomm.Info.worker)
}

// -------------------------------------------------------------------

// ClientMessage

// required .loomcomm.ClientMessage.Type type = 1;
inline bool ClientMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::loomcomm::ClientMessage_Type ClientMessage::type() const {
  // @@protoc_insertion_point(field_get:loomcomm.ClientMessage.type)
  return static_cast< ::loomcomm::ClientMessage_Type >(type_);
}
inline void ClientMessage::set_type(::loomcomm::ClientMessage_Type value) {
  assert(::loomcomm::ClientMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:loomcomm.ClientMessage.type)
}

// optional .loomcomm.DataPrologue data = 2;
inline bool ClientMessage::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMessage::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientMessage::clear_data() {
  if (data_ != NULL) data_->::loomcomm::DataPrologue::Clear();
  clear_has_data();
}
inline const ::loomcomm::DataPrologue& ClientMessage::data() const {
  // @@protoc_insertion_point(field_get:loomcomm.ClientMessage.data)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return data_ != NULL ? *data_ : *default_instance().data_;
#else
  return data_ != NULL ? *data_ : *default_instance_->data_;
#endif
}
inline ::loomcomm::DataPrologue* ClientMessage::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::loomcomm::DataPrologue;
  // @@protoc_insertion_point(field_mutable:loomcomm.ClientMessage.data)
  return data_;
}
inline ::loomcomm::DataPrologue* ClientMessage::release_data() {
  clear_has_data();
  ::loomcomm::DataPrologue* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ClientMessage::set_allocated_data(::loomcomm::DataPrologue* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:loomcomm.ClientMessage.data)
}

// optional .loomcomm.Info info = 3;
inline bool ClientMessage::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientMessage::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientMessage::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientMessage::clear_info() {
  if (info_ != NULL) info_->::loomcomm::Info::Clear();
  clear_has_info();
}
inline const ::loomcomm::Info& ClientMessage::info() const {
  // @@protoc_insertion_point(field_get:loomcomm.ClientMessage.info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::loomcomm::Info* ClientMessage::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::loomcomm::Info;
  // @@protoc_insertion_point(field_mutable:loomcomm.ClientMessage.info)
  return info_;
}
inline ::loomcomm::Info* ClientMessage::release_info() {
  clear_has_info();
  ::loomcomm::Info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ClientMessage::set_allocated_info(::loomcomm::Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:loomcomm.ClientMessage.info)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loomcomm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loomcomm_2eproto__INCLUDED
