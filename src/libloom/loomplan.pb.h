// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loomplan.proto

#ifndef PROTOBUF_loomplan_2eproto__INCLUDED
#define PROTOBUF_loomplan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace loomplan {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loomplan_2eproto();
void protobuf_AssignDesc_loomplan_2eproto();
void protobuf_ShutdownFile_loomplan_2eproto();

class Task;
class Plan;

// ===================================================================

class Task : public ::google::protobuf::MessageLite {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Task& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Task* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 task_type = 1;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  inline ::google::protobuf::int32 task_type() const;
  inline void set_task_type(::google::protobuf::int32 value);

  // required bytes config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const void* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // repeated int32 input_ids = 3;
  inline int input_ids_size() const;
  inline void clear_input_ids();
  static const int kInputIdsFieldNumber = 3;
  inline ::google::protobuf::int32 input_ids(int index) const;
  inline void set_input_ids(int index, ::google::protobuf::int32 value);
  inline void add_input_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_ids();

  // @@protoc_insertion_point(class_scope:loomplan.Task)
 private:
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* config_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_ids_;
  ::google::protobuf::int32 task_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomplan_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomplan_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomplan_2eproto();
  friend void protobuf_ShutdownFile_loomplan_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class Plan : public ::google::protobuf::MessageLite {
 public:
  Plan();
  virtual ~Plan();

  Plan(const Plan& from);

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Plan& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Plan* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Plan* other);

  // implements Message ----------------------------------------------

  Plan* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string task_types = 1;
  inline int task_types_size() const;
  inline void clear_task_types();
  static const int kTaskTypesFieldNumber = 1;
  inline const ::std::string& task_types(int index) const;
  inline ::std::string* mutable_task_types(int index);
  inline void set_task_types(int index, const ::std::string& value);
  inline void set_task_types(int index, const char* value);
  inline void set_task_types(int index, const char* value, size_t size);
  inline ::std::string* add_task_types();
  inline void add_task_types(const ::std::string& value);
  inline void add_task_types(const char* value);
  inline void add_task_types(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& task_types() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_task_types();

  // repeated .loomplan.Task tasks = 2;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 2;
  inline const ::loomplan::Task& tasks(int index) const;
  inline ::loomplan::Task* mutable_tasks(int index);
  inline ::loomplan::Task* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::loomplan::Task >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::loomplan::Task >*
      mutable_tasks();

  // repeated int32 result_ids = 3;
  inline int result_ids_size() const;
  inline void clear_result_ids();
  static const int kResultIdsFieldNumber = 3;
  inline ::google::protobuf::int32 result_ids(int index) const;
  inline void set_result_ids(int index, ::google::protobuf::int32 value);
  inline void add_result_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result_ids();

  // @@protoc_insertion_point(class_scope:loomplan.Plan)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> task_types_;
  ::google::protobuf::RepeatedPtrField< ::loomplan::Task > tasks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_ids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomplan_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomplan_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomplan_2eproto();
  friend void protobuf_ShutdownFile_loomplan_2eproto();

  void InitAsDefaultInstance();
  static Plan* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// required int32 task_type = 1;
inline bool Task::has_task_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_task_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
inline ::google::protobuf::int32 Task::task_type() const {
  // @@protoc_insertion_point(field_get:loomplan.Task.task_type)
  return task_type_;
}
inline void Task::set_task_type(::google::protobuf::int32 value) {
  set_has_task_type();
  task_type_ = value;
  // @@protoc_insertion_point(field_set:loomplan.Task.task_type)
}

// required bytes config = 2;
inline bool Task::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_config() {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& Task::config() const {
  // @@protoc_insertion_point(field_get:loomplan.Task.config)
  return *config_;
}
inline void Task::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
  // @@protoc_insertion_point(field_set:loomplan.Task.config)
}
inline void Task::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
  // @@protoc_insertion_point(field_set_char:loomplan.Task.config)
}
inline void Task::set_config(const void* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomplan.Task.config)
}
inline ::std::string* Task::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:loomplan.Task.config)
  return config_;
}
inline ::std::string* Task::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Task::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:loomplan.Task.config)
}

// repeated int32 input_ids = 3;
inline int Task::input_ids_size() const {
  return input_ids_.size();
}
inline void Task::clear_input_ids() {
  input_ids_.Clear();
}
inline ::google::protobuf::int32 Task::input_ids(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Task.input_ids)
  return input_ids_.Get(index);
}
inline void Task::set_input_ids(int index, ::google::protobuf::int32 value) {
  input_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:loomplan.Task.input_ids)
}
inline void Task::add_input_ids(::google::protobuf::int32 value) {
  input_ids_.Add(value);
  // @@protoc_insertion_point(field_add:loomplan.Task.input_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Task::input_ids() const {
  // @@protoc_insertion_point(field_list:loomplan.Task.input_ids)
  return input_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Task::mutable_input_ids() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Task.input_ids)
  return &input_ids_;
}

// -------------------------------------------------------------------

// Plan

// repeated string task_types = 1;
inline int Plan::task_types_size() const {
  return task_types_.size();
}
inline void Plan::clear_task_types() {
  task_types_.Clear();
}
inline const ::std::string& Plan::task_types(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Plan.task_types)
  return task_types_.Get(index);
}
inline ::std::string* Plan::mutable_task_types(int index) {
  // @@protoc_insertion_point(field_mutable:loomplan.Plan.task_types)
  return task_types_.Mutable(index);
}
inline void Plan::set_task_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:loomplan.Plan.task_types)
  task_types_.Mutable(index)->assign(value);
}
inline void Plan::set_task_types(int index, const char* value) {
  task_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:loomplan.Plan.task_types)
}
inline void Plan::set_task_types(int index, const char* value, size_t size) {
  task_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomplan.Plan.task_types)
}
inline ::std::string* Plan::add_task_types() {
  return task_types_.Add();
}
inline void Plan::add_task_types(const ::std::string& value) {
  task_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:loomplan.Plan.task_types)
}
inline void Plan::add_task_types(const char* value) {
  task_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:loomplan.Plan.task_types)
}
inline void Plan::add_task_types(const char* value, size_t size) {
  task_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:loomplan.Plan.task_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Plan::task_types() const {
  // @@protoc_insertion_point(field_list:loomplan.Plan.task_types)
  return task_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Plan::mutable_task_types() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Plan.task_types)
  return &task_types_;
}

// repeated .loomplan.Task tasks = 2;
inline int Plan::tasks_size() const {
  return tasks_.size();
}
inline void Plan::clear_tasks() {
  tasks_.Clear();
}
inline const ::loomplan::Task& Plan::tasks(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Plan.tasks)
  return tasks_.Get(index);
}
inline ::loomplan::Task* Plan::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:loomplan.Plan.tasks)
  return tasks_.Mutable(index);
}
inline ::loomplan::Task* Plan::add_tasks() {
  // @@protoc_insertion_point(field_add:loomplan.Plan.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::loomplan::Task >&
Plan::tasks() const {
  // @@protoc_insertion_point(field_list:loomplan.Plan.tasks)
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::loomplan::Task >*
Plan::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Plan.tasks)
  return &tasks_;
}

// repeated int32 result_ids = 3;
inline int Plan::result_ids_size() const {
  return result_ids_.size();
}
inline void Plan::clear_result_ids() {
  result_ids_.Clear();
}
inline ::google::protobuf::int32 Plan::result_ids(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Plan.result_ids)
  return result_ids_.Get(index);
}
inline void Plan::set_result_ids(int index, ::google::protobuf::int32 value) {
  result_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:loomplan.Plan.result_ids)
}
inline void Plan::add_result_ids(::google::protobuf::int32 value) {
  result_ids_.Add(value);
  // @@protoc_insertion_point(field_add:loomplan.Plan.result_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Plan::result_ids() const {
  // @@protoc_insertion_point(field_list:loomplan.Plan.result_ids)
  return result_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Plan::mutable_result_ids() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Plan.result_ids)
  return &result_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loomplan

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loomplan_2eproto__INCLUDED
