// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loomplan.proto

#ifndef PROTOBUF_loomplan_2eproto__INCLUDED
#define PROTOBUF_loomplan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace loomplan {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loomplan_2eproto();
void protobuf_AssignDesc_loomplan_2eproto();
void protobuf_ShutdownFile_loomplan_2eproto();

class Task;
class Resource;
class ResourceRequest;
class Plan;

enum Task_Policy {
  Task_Policy_POLICY_STANDARD = 1,
  Task_Policy_POLICY_SIMPLE = 2,
  Task_Policy_POLICY_SCHEDULER = 3
};
bool Task_Policy_IsValid(int value);
const Task_Policy Task_Policy_Policy_MIN = Task_Policy_POLICY_STANDARD;
const Task_Policy Task_Policy_Policy_MAX = Task_Policy_POLICY_SCHEDULER;
const int Task_Policy_Policy_ARRAYSIZE = Task_Policy_Policy_MAX + 1;

// ===================================================================

class Task : public ::google::protobuf::MessageLite {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Task& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Task* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Task_Policy Policy;
  static const Policy POLICY_STANDARD = Task_Policy_POLICY_STANDARD;
  static const Policy POLICY_SIMPLE = Task_Policy_POLICY_SIMPLE;
  static const Policy POLICY_SCHEDULER = Task_Policy_POLICY_SCHEDULER;
  static inline bool Policy_IsValid(int value) {
    return Task_Policy_IsValid(value);
  }
  static const Policy Policy_MIN =
    Task_Policy_Policy_MIN;
  static const Policy Policy_MAX =
    Task_Policy_Policy_MAX;
  static const int Policy_ARRAYSIZE =
    Task_Policy_Policy_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required int32 task_type = 1;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  inline ::google::protobuf::int32 task_type() const;
  inline void set_task_type(::google::protobuf::int32 value);

  // required bytes config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const void* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // repeated int32 input_ids = 3;
  inline int input_ids_size() const;
  inline void clear_input_ids();
  static const int kInputIdsFieldNumber = 3;
  inline ::google::protobuf::int32 input_ids(int index) const;
  inline void set_input_ids(int index, ::google::protobuf::int32 value);
  inline void add_input_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_ids();

  // optional .loomplan.Task.Policy policy = 4 [default = POLICY_STANDARD];
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 4;
  inline ::loomplan::Task_Policy policy() const;
  inline void set_policy(::loomplan::Task_Policy value);

  // optional int32 resource_request_index = 5 [default = -1];
  inline bool has_resource_request_index() const;
  inline void clear_resource_request_index();
  static const int kResourceRequestIndexFieldNumber = 5;
  inline ::google::protobuf::int32 resource_request_index() const;
  inline void set_resource_request_index(::google::protobuf::int32 value);

  // optional string label = 12;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 12;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:loomplan.Task)
 private:
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_policy();
  inline void clear_has_policy();
  inline void set_has_resource_request_index();
  inline void clear_has_resource_request_index();
  inline void set_has_label();
  inline void clear_has_label();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* config_;
  ::google::protobuf::int32 task_type_;
  int policy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_ids_;
  ::std::string* label_;
  ::google::protobuf::int32 resource_request_index_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomplan_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomplan_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomplan_2eproto();
  friend void protobuf_ShutdownFile_loomplan_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class Resource : public ::google::protobuf::MessageLite {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Resource& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Resource* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Resource* other);

  // implements Message ----------------------------------------------

  Resource* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 resource_type = 1;
  inline bool has_resource_type() const;
  inline void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  inline ::google::protobuf::int32 resource_type() const;
  inline void set_resource_type(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:loomplan.Resource)
 private:
  inline void set_has_resource_type();
  inline void clear_has_resource_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 resource_type_;
  ::google::protobuf::int32 value_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomplan_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomplan_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomplan_2eproto();
  friend void protobuf_ShutdownFile_loomplan_2eproto();

  void InitAsDefaultInstance();
  static Resource* default_instance_;
};
// -------------------------------------------------------------------

class ResourceRequest : public ::google::protobuf::MessageLite {
 public:
  ResourceRequest();
  virtual ~ResourceRequest();

  ResourceRequest(const ResourceRequest& from);

  inline ResourceRequest& operator=(const ResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ResourceRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResourceRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResourceRequest* other);

  // implements Message ----------------------------------------------

  ResourceRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceRequest& from);
  void MergeFrom(const ResourceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .loomplan.Resource resources = 1;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 1;
  inline const ::loomplan::Resource& resources(int index) const;
  inline ::loomplan::Resource* mutable_resources(int index);
  inline ::loomplan::Resource* add_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::loomplan::Resource >&
      resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::loomplan::Resource >*
      mutable_resources();

  // @@protoc_insertion_point(class_scope:loomplan.ResourceRequest)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::loomplan::Resource > resources_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomplan_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomplan_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomplan_2eproto();
  friend void protobuf_ShutdownFile_loomplan_2eproto();

  void InitAsDefaultInstance();
  static ResourceRequest* default_instance_;
};
// -------------------------------------------------------------------

class Plan : public ::google::protobuf::MessageLite {
 public:
  Plan();
  virtual ~Plan();

  Plan(const Plan& from);

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Plan& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Plan* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Plan* other);

  // implements Message ----------------------------------------------

  Plan* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .loomplan.ResourceRequest resource_requests = 1;
  inline int resource_requests_size() const;
  inline void clear_resource_requests();
  static const int kResourceRequestsFieldNumber = 1;
  inline const ::loomplan::ResourceRequest& resource_requests(int index) const;
  inline ::loomplan::ResourceRequest* mutable_resource_requests(int index);
  inline ::loomplan::ResourceRequest* add_resource_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::loomplan::ResourceRequest >&
      resource_requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::loomplan::ResourceRequest >*
      mutable_resource_requests();

  // repeated .loomplan.Task tasks = 2;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 2;
  inline const ::loomplan::Task& tasks(int index) const;
  inline ::loomplan::Task* mutable_tasks(int index);
  inline ::loomplan::Task* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::loomplan::Task >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::loomplan::Task >*
      mutable_tasks();

  // repeated int32 result_ids = 3;
  inline int result_ids_size() const;
  inline void clear_result_ids();
  static const int kResultIdsFieldNumber = 3;
  inline ::google::protobuf::int32 result_ids(int index) const;
  inline void set_result_ids(int index, ::google::protobuf::int32 value);
  inline void add_result_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result_ids();

  // @@protoc_insertion_point(class_scope:loomplan.Plan)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::loomplan::ResourceRequest > resource_requests_;
  ::google::protobuf::RepeatedPtrField< ::loomplan::Task > tasks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_ids_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_loomplan_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_loomplan_2eproto();
  #endif
  friend void protobuf_AssignDesc_loomplan_2eproto();
  friend void protobuf_ShutdownFile_loomplan_2eproto();

  void InitAsDefaultInstance();
  static Plan* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// required int32 task_type = 1;
inline bool Task::has_task_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_task_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
inline ::google::protobuf::int32 Task::task_type() const {
  // @@protoc_insertion_point(field_get:loomplan.Task.task_type)
  return task_type_;
}
inline void Task::set_task_type(::google::protobuf::int32 value) {
  set_has_task_type();
  task_type_ = value;
  // @@protoc_insertion_point(field_set:loomplan.Task.task_type)
}

// required bytes config = 2;
inline bool Task::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_config() {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& Task::config() const {
  // @@protoc_insertion_point(field_get:loomplan.Task.config)
  return *config_;
}
inline void Task::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
  // @@protoc_insertion_point(field_set:loomplan.Task.config)
}
inline void Task::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
  // @@protoc_insertion_point(field_set_char:loomplan.Task.config)
}
inline void Task::set_config(const void* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomplan.Task.config)
}
inline ::std::string* Task::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:loomplan.Task.config)
  return config_;
}
inline ::std::string* Task::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Task::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:loomplan.Task.config)
}

// repeated int32 input_ids = 3;
inline int Task::input_ids_size() const {
  return input_ids_.size();
}
inline void Task::clear_input_ids() {
  input_ids_.Clear();
}
inline ::google::protobuf::int32 Task::input_ids(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Task.input_ids)
  return input_ids_.Get(index);
}
inline void Task::set_input_ids(int index, ::google::protobuf::int32 value) {
  input_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:loomplan.Task.input_ids)
}
inline void Task::add_input_ids(::google::protobuf::int32 value) {
  input_ids_.Add(value);
  // @@protoc_insertion_point(field_add:loomplan.Task.input_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Task::input_ids() const {
  // @@protoc_insertion_point(field_list:loomplan.Task.input_ids)
  return input_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Task::mutable_input_ids() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Task.input_ids)
  return &input_ids_;
}

// optional .loomplan.Task.Policy policy = 4 [default = POLICY_STANDARD];
inline bool Task::has_policy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_policy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_policy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_policy() {
  policy_ = 1;
  clear_has_policy();
}
inline ::loomplan::Task_Policy Task::policy() const {
  // @@protoc_insertion_point(field_get:loomplan.Task.policy)
  return static_cast< ::loomplan::Task_Policy >(policy_);
}
inline void Task::set_policy(::loomplan::Task_Policy value) {
  assert(::loomplan::Task_Policy_IsValid(value));
  set_has_policy();
  policy_ = value;
  // @@protoc_insertion_point(field_set:loomplan.Task.policy)
}

// optional int32 resource_request_index = 5 [default = -1];
inline bool Task::has_resource_request_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_resource_request_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_resource_request_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_resource_request_index() {
  resource_request_index_ = -1;
  clear_has_resource_request_index();
}
inline ::google::protobuf::int32 Task::resource_request_index() const {
  // @@protoc_insertion_point(field_get:loomplan.Task.resource_request_index)
  return resource_request_index_;
}
inline void Task::set_resource_request_index(::google::protobuf::int32 value) {
  set_has_resource_request_index();
  resource_request_index_ = value;
  // @@protoc_insertion_point(field_set:loomplan.Task.resource_request_index)
}

// optional string label = 12;
inline bool Task::has_label() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_label() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_label() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Task::label() const {
  // @@protoc_insertion_point(field_get:loomplan.Task.label)
  return *label_;
}
inline void Task::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set:loomplan.Task.label)
}
inline void Task::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set_char:loomplan.Task.label)
}
inline void Task::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:loomplan.Task.label)
}
inline ::std::string* Task::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:loomplan.Task.label)
  return label_;
}
inline ::std::string* Task::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Task::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:loomplan.Task.label)
}

// -------------------------------------------------------------------

// Resource

// required int32 resource_type = 1;
inline bool Resource::has_resource_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resource::set_has_resource_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resource::clear_has_resource_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resource::clear_resource_type() {
  resource_type_ = 0;
  clear_has_resource_type();
}
inline ::google::protobuf::int32 Resource::resource_type() const {
  // @@protoc_insertion_point(field_get:loomplan.Resource.resource_type)
  return resource_type_;
}
inline void Resource::set_resource_type(::google::protobuf::int32 value) {
  set_has_resource_type();
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:loomplan.Resource.resource_type)
}

// required int32 value = 2;
inline bool Resource::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resource::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resource::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resource::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Resource::value() const {
  // @@protoc_insertion_point(field_get:loomplan.Resource.value)
  return value_;
}
inline void Resource::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:loomplan.Resource.value)
}

// -------------------------------------------------------------------

// ResourceRequest

// repeated .loomplan.Resource resources = 1;
inline int ResourceRequest::resources_size() const {
  return resources_.size();
}
inline void ResourceRequest::clear_resources() {
  resources_.Clear();
}
inline const ::loomplan::Resource& ResourceRequest::resources(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.ResourceRequest.resources)
  return resources_.Get(index);
}
inline ::loomplan::Resource* ResourceRequest::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:loomplan.ResourceRequest.resources)
  return resources_.Mutable(index);
}
inline ::loomplan::Resource* ResourceRequest::add_resources() {
  // @@protoc_insertion_point(field_add:loomplan.ResourceRequest.resources)
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::loomplan::Resource >&
ResourceRequest::resources() const {
  // @@protoc_insertion_point(field_list:loomplan.ResourceRequest.resources)
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::loomplan::Resource >*
ResourceRequest::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.ResourceRequest.resources)
  return &resources_;
}

// -------------------------------------------------------------------

// Plan

// repeated .loomplan.ResourceRequest resource_requests = 1;
inline int Plan::resource_requests_size() const {
  return resource_requests_.size();
}
inline void Plan::clear_resource_requests() {
  resource_requests_.Clear();
}
inline const ::loomplan::ResourceRequest& Plan::resource_requests(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Plan.resource_requests)
  return resource_requests_.Get(index);
}
inline ::loomplan::ResourceRequest* Plan::mutable_resource_requests(int index) {
  // @@protoc_insertion_point(field_mutable:loomplan.Plan.resource_requests)
  return resource_requests_.Mutable(index);
}
inline ::loomplan::ResourceRequest* Plan::add_resource_requests() {
  // @@protoc_insertion_point(field_add:loomplan.Plan.resource_requests)
  return resource_requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::loomplan::ResourceRequest >&
Plan::resource_requests() const {
  // @@protoc_insertion_point(field_list:loomplan.Plan.resource_requests)
  return resource_requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::loomplan::ResourceRequest >*
Plan::mutable_resource_requests() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Plan.resource_requests)
  return &resource_requests_;
}

// repeated .loomplan.Task tasks = 2;
inline int Plan::tasks_size() const {
  return tasks_.size();
}
inline void Plan::clear_tasks() {
  tasks_.Clear();
}
inline const ::loomplan::Task& Plan::tasks(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Plan.tasks)
  return tasks_.Get(index);
}
inline ::loomplan::Task* Plan::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:loomplan.Plan.tasks)
  return tasks_.Mutable(index);
}
inline ::loomplan::Task* Plan::add_tasks() {
  // @@protoc_insertion_point(field_add:loomplan.Plan.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::loomplan::Task >&
Plan::tasks() const {
  // @@protoc_insertion_point(field_list:loomplan.Plan.tasks)
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::loomplan::Task >*
Plan::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Plan.tasks)
  return &tasks_;
}

// repeated int32 result_ids = 3;
inline int Plan::result_ids_size() const {
  return result_ids_.size();
}
inline void Plan::clear_result_ids() {
  result_ids_.Clear();
}
inline ::google::protobuf::int32 Plan::result_ids(int index) const {
  // @@protoc_insertion_point(field_get:loomplan.Plan.result_ids)
  return result_ids_.Get(index);
}
inline void Plan::set_result_ids(int index, ::google::protobuf::int32 value) {
  result_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:loomplan.Plan.result_ids)
}
inline void Plan::add_result_ids(::google::protobuf::int32 value) {
  result_ids_.Add(value);
  // @@protoc_insertion_point(field_add:loomplan.Plan.result_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Plan::result_ids() const {
  // @@protoc_insertion_point(field_list:loomplan.Plan.result_ids)
  return result_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Plan::mutable_result_ids() {
  // @@protoc_insertion_point(field_mutable_list:loomplan.Plan.result_ids)
  return &result_ids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loomplan

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loomplan_2eproto__INCLUDED
